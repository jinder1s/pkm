;;; pkm2-object-kvd.el -*- lexical-binding: t; -*-


(defvar pkm-structure-fully-specified-kvds-plist ())
(defvar pkm-structure-required-kvds-plist ())
(defvar pkm-structure-unique-required-plist ())
(defvar pkm-kvd-schemas-plist ())
(defvar pkm-kvd-key-to-structure-plist ())
(defvar pkm-data-type-to-kvd-key-plist ())

(defun pkm-object-register-structure-with-kvd (kvd structure-name)
  (let* ((key (plist-get kvd :key))
         (current-registrations  (plist-get pkm-kvd-key-to-structure-plist key #'equal)))
    (unless (member structure-name current-registrations)
      (setq  pkm-kvd-key-to-structure-plist (plist-put  pkm-kvd-key-to-structure-plist key (-concat `(,structure-name) current-registrations) #'equal)))))

(defun pkm-object-register-kvd-key-with-data-type (kvd)
  (let* ((key (plist-get kvd :key))
         (data-type (plist-get kvd :data-type))
         (current-registrations  (plist-get pkm-data-type-to-kvd-key-plist data-type #'equal)))
    (unless (member key current-registrations)
      (setq  pkm-data-type-to-kvd-key-plist (plist-put  pkm-data-type-to-kvd-key-plist data-type (-concat `(,key) current-registrations) #'equal)))))


(defun pkm-object-kvd-get-kvd-spec-for-key-in-structure (key structure-name)
  (--> (plist-get pkm-structure-defined-schemas-plist structure-name)
       (plist-get it :assets)
       (-find (lambda (asset-spec)
                  (when (and (equal (plist-get asset-spec :pkm-type) 'kvd)
                             (equal (plist-get asset-spec :key) key))
                    t))
                it)))

(defun pkm--object-find-unique-identifiers (structure-name structure-plist required-kvds-plist)
  (list (pkm--object-find-unique-identifiers-unique-key structure-name structure-plist required-kvds-plist)
        (pkm--object-find-unique-identifiers-unique-kvds structure-name structure-plist required-kvds-plist)))

(defun pkm--object-find-unique-identifiers-unique-key (structure-name  structure-plist required-kvds-plist)
  (let* ((self-fully-defined-kvds (plist-get required-kvds-plist structure-name))
         (keys (-distinct (-map (lambda (kvd) (plist-get kvd :key)) self-fully-defined-kvds)))
         (structure-names (doom-plist-keys required-kvds-plist))
         (unique-keys (-filter
                       (lambda (key)
                         (not (-any? (lambda (s-name)
                                       (unless (or (eq s-name structure-name)
                                                   (member structure-name (--> (plist-get structure-plist s-name) (plist-get it :parents))))
                                           (--> (plist-get required-kvds-plist s-name)
                                                (-map (lambda (kvd)
                                                        (plist-get kvd :key)) it)
                                                (member key it)) ))
                                     structure-names) ))
                       keys)))
    unique-keys))

(defun pkm--object-find-unique-identifiers-unique-kvds (structure-name structure-plist required-kvds-plist)
  (let* ((self-fully-defined-kvds (plist-get required-kvds-plist structure-name))
         (structure-names (doom-plist-keys required-kvds-plist))
         (unique-kvds (-filter
                       (lambda (s-kvd)
                         (not (-any? (lambda (temp-name)
                                       (if (or (eq temp-name structure-name) (member structure-name (--> (plist-get structure-plist temp-name) (plist-get it :parents))))
                                           nil
                                         (--> (plist-get required-kvds-plist temp-name)
                                              (-any? (lambda (kvd)
                                                       (if (equal (plist-get s-kvd :key) (plist-get kvd :key))
                                                           (or (equal (plist-get s-kvd :value) (plist-get kvd :value))
                                                               (and (and (plist-get s-kvd :choices) (plist-get kvd :choices))
                                                                    (or  (-intersection (plist-get s-kvd :choices) (plist-get kvd :choices))
                                                                         (-intersection (plist-get kvd :choices) (plist-get s-kvd :choices))) ))
                                                         nil))
                                                     it))))
                                     structure-names)))
                       self-fully-defined-kvds)))
    unique-kvds))



(defun pkm--object-get-required-kvds (object-schema)
  (let* ((assets (plist-get object-schema :assets))
         (primary-asset (-find (lambda (asset)
                                 (plist-get asset :primary-node))
                               assets))
         (required-kvds (-filter (lambda (possibly-kvd)
                                   (and (eq 'kvd (plist-get possibly-kvd :pkm-type))
                                        (not (plist-get possibly-kvd :optional))
                                        (not (plist-get possibly-kvd :managed))
                                        (-any
                                         (lambda (specifier)
                                           (pkm--object-does-specifier-match specifier primary-asset))
                                         (plist-get possibly-kvd :link-to))))
                                 assets)))
    required-kvds))

(defun pkm--behavior-get-required-kvds (object-schema)
  (let* ((assets (plist-get object-schema :assets))
         (required-kvds (-filter (lambda (possibly-kvd)
                                   (and (eq 'kvd (plist-get possibly-kvd :pkm-type))
                                        (not (plist-get possibly-kvd :optional))
                                        (not (plist-get possibly-kvd :managed))
                                        ))
                                 assets)))
    required-kvds))


(defun pkm--object-get-required-fully-specified-kvds (object-schema)
  (let* ((required-kvds (pkm--object-get-required-kvds object-schema))
         (fully-specified (pkm--object-get-required-fully-specified-kvds2 required-kvds) ))
    fully-specified))
(defun pkm--object-get-required-fully-specified-kvds2 (kvds)
"TODO replace v1 of this function with this."
  (-filter (lambda (kvd-schema)
             (or (stringp (plist-get kvd-schema :value))
                 (when (plist-get kvd-schema :choices)
                   (listp (plist-get kvd-schema :choices)))))
                                   kvds))
(defun pkm--object-get-time-related-kvd-keys ()
  (plist-get pkm-data-type-to-kvd-key-plist 'DATETIME))

(provide 'pkm2-object-kvd)
